buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.jfrog.artifactory' version '4.4.17'
    id "com.github.kt3k.coveralls" version "2.8.1"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "findbugs"
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.jfrog.artifactory'

group 'com.treasuredata'

// Build version
String baseVersion = '0.1.4'
if (project.hasProperty('release') && project.property('release').equals('true')) {
    version = baseVersion
}
else {
    version = "${baseVersion}-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    jcenter()
}

findbugs {
    effort = 'max'
    excludeFilter = file("${rootProject.projectDir}/config/findbugs-exclude.xml")
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task testsJar(type: Jar, dependsOn: classes) {
    classifier = 'tests'
    from sourceSets.test.output
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:1.10.19'
    compile 'com.google.guava:guava:22.0'
    compile 'org.slf4j:slf4j-api:1.7.22'
    compile 'net.jodah:failsafe:1.0.4'
    compile 'org.jboss.resteasy:resteasy-undertow:3.1.3.Final'
    compile 'io.undertow:undertow-servlet:1.4.15.Final'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            version version

            artifact sourcesJar
            artifact testsJar
            artifact javadocJar
        }
        shadow(MavenPublication) {
            from components.shadow
            version version
        }
    }
}

artifactoryPublish {
    publications('mavenJava')
}

String repo = version.endsWith('-SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'
artifactory {
    contextUrl = 'https://treasuredata.artifactoryonline.com/treasuredata'
    publish {
        repository {
            repoKey = repo
            username = "${System.env.TD_ARTIFACTORY_USERNAME}"
            password = "${System.env.TD_ARTIFACTORY_PASSWORD}"
        }
    }
}

